"""
Django views for instructor_view project.

Generated by 'django-admin startApp instructor_view' using Django 4.2.4.
"""

import json
from django.shortcuts import render
from django.http import JsonResponse, HttpResponseBadRequest
from django.views.decorators.csrf import csrf_exempt
from .tests import usr3
from .tests import usr4
from .tests import req1
from .tests import req2
from .tests import subj1
from .tests import subj2
from .tests import course1
from .tests import subj_settings

INSTRUCTOR_VIEW_USER_ID = -1 # set to -1 default to detect issues

def not_found_view(request):
    '''View not found'''
    return render(request, 'notFound404.html', {})

def home_view(request):
    '''Home view'''
    return render(request, 'iHome.html', {})

def instructor_web_header_view(request):
    ''' take the id and edit header with initial data '''
    if INSTRUCTOR_VIEW_USER_ID == 3:
        usr = json.dumps(usr3)
        return render(request, 'iWebHeader.html', {'usr': usr})
    if INSTRUCTOR_VIEW_USER_ID == 4:
        usr = json.dumps(usr4)
        return render(request, 'iWebHeader.html', {'usr': usr})
    # whoops maybe id doesnt exist
    return HttpResponseBadRequest("Invalid Request Type")

def review_req_view(request, input_id):
    ''' check the id exists '''
    if input_id == req1['id']:
        req = json.dumps(req1)
        return render(request, 'reviewRequest.html', {'req':req})
    if input_id == req2['id']:
        req = json.dumps(req2)
        return render(request, 'reviewRequest.html', {'req':req})
    return JsonResponse({'error': 'Record not found'}, status=404)

def view_reqs_view(request, id):
    courseId = id
    if(courseId == 31):
        return render(request, 'viewRequests.html', {'course': json.dumps(course31)})
    if(courseId == 32):
        return render(request, 'viewRequests.html', {'course': json.dumps(course32)})
    if(courseId == 41):
        return render(request, 'viewRequests.html', {'course': json.dumps(course41)})
    if(courseId == 42):
        return render(request, 'viewRequests.html', {'course': json.dumps(course42)})

def view_resolved_view(request, input_id):
    '''View resolved requests'''
    print(input_id) # To make pylint happy
    return render(request, 'viewResolved.html', {})

def subj_settings_view(request, input_id):
    '''View for subject preferences'''
    # Check the ID exists
    if input_id == subj1['id']:
        req = json.dumps(subj1)
        return render(request, 'subjectSettings.html', {'req':req})
    if input_id == subj2['id']:
        req = json.dumps(subj2)
        return render(request, 'subjectSettings.html', {'req':req})
    return JsonResponse({'error': 'Record not found'}, status=404)

def view_profile_view(request, input_id):
    '''View for student profile'''
    # check the id exists
    if input_id == usr3['id']:
        usr = json.dumps(usr3)
        return render(request, 'viewProfile.html', {'usr':usr})
    if input_id == usr4['id']:
        usr = json.dumps(usr4)
        return render(request, 'viewProfile.html', {'usr':usr})
    return JsonResponse({'error': 'Record not found'}, status=404)


# GET REQUESTS
# test/example purposes only, obviously not useable, must be filled in by backend
def get_courses(request, user_id):
    '''GET request for courses'''
    if user_id == 1:
        return JsonResponse({
            'courses': json.dumps([course1, course1])
        })
    # id not found
    return not_found_view(request)

def get_request_status(request, request_id):
    '''GET request for request status'''
    if request_id == 1:
        return JsonResponse({'status': 'balls'})
    # id not found
    return not_found_view(request)

def get_request(request, request_id):
    '''GET a request'''
    if request_id == 1:
        return JsonResponse(req1)
    # id not found
    return not_found_view(request)

def get_old_versions(request, request_id):
    '''GET old requests of request'''
    if request_id == 1:
        return JsonResponse({'request_ids':json.dumps([1,2,3])})
    # id not found
    return not_found_view(request)

def get_student(request, student_id):
    '''GET a student by id'''
    if student_id == 3:
        return JsonResponse(usr3)
    # id not found
    return not_found_view(request)

def get_subject_settings(request, subject_id):
    '''GET all settings for a subject'''
    if subject_id == 1:
        return JsonResponse(subj_settings)
    # id not found
    return not_found_view(request)

def get_aap(request, aap_id):
    '''GET AAPs of request?'''
    if aap_id == 1:
        return JsonResponse({'this is an aap': 'aap go beep boop'})
    # id not found
    return not_found_view(request)

def get_request_history(request, student_id):
    '''GET the history of requests'''
    if student_id == 1:
        return JsonResponse({
            'requests':json.dumps([req1, req2])
        })
    # id not found
    return not_found_view(request)

def get_user_id(request):
    '''Get the ID of a request'''
    print(request) # pylint
    return JsonResponse({'id': INSTRUCTOR_VIEW_USER_ID})

def get_requests(requets, course_id):
    if((course_id == 31) or (course_id == 41)):
        return JsonResponse({
            'requests': json.dumps([req311, req312])
        })
    if((course_id == 32) or (course_id == 42)):
        return JsonResponse({
            'requests': json.dumps([req321, req322])
        })


# POST REQUESTS
@csrf_exempt
def instructor_add_aap(request):
    '''POST an aap as an Instructor'''
    if request.method == 'POST':
        try:
            # Parse the JSON data from the request body
            # e.g. aap = json.loads(request.body.decode('utf-8'))
            print(INSTRUCTOR_VIEW_USER_ID) # happy Pylint
        except json.JSONDecodeError:
            return HttpResponseBadRequest("Invalid JSON data")
        return JsonResponse({"message": "Case created successfully"})
    return HttpResponseBadRequest("Invalid Request Type")

# PUT REQUESTS
@csrf_exempt
def make_complex(request, request_id):
    '''Make a request complex'''
    # check the id exists and all that jazz
    if request.method == 'PUT':
        # if complex, set to non-complex
        # else make complex
        print(request_id) # Pylint happy
    return JsonResponse({"message": "Case created successfully"})

@csrf_exempt
def set_user_id(request, input_id):
    '''Set a user id'''
    if request.method == 'PUT':
        global INSTRUCTOR_VIEW_USER_ID
        INSTRUCTOR_VIEW_USER_ID = input_id
        print(input_id) # Make pylint happy
        return JsonResponse({"message": "id successfully set"})
    return HttpResponseBadRequest("Invalid Request Type")

@csrf_exempt
def request_response(request, request_id):
    '''Set response request'''
    # check the id exists and all that jazz
    if request.method == 'PUT':
        # read the header to see what the response is and set it
        print(request_id) # make pylint happy
        return JsonResponse({"message": "Case created successfully"})
    return HttpResponseBadRequest("Invalid Request Type")

@csrf_exempt
def change_settings(request):
    '''Change settings'''
    # check the id exists and all that jazz
    if request.method == 'PUT':
        # read the header to see what settings have been changed
        print("") # make pylint happy
        return JsonResponse({"message": "Case created successfully"})
    return HttpResponseBadRequest("Invalid Request Type")


# fake data to play with before DB connected
usr3 = {
    'user_id': 3,
    'name' : 'Ryan Goh',
    'first_name': 'Ryan',
    'last_name': 'Goh',
    'email': 'insertEmailHereLol@student.unimelb.edu.au',
    'email_preference': 1,
    'darkmode_preference': 1,
}
usr4 = {
    'user_id': 4,
    'name' : 'Yan Zong Goh',
    'first_name': 'Yan Zong',
    'last_name': 'Goh',
    'email': 'thisIsAnEmail@student.unimelb.edu.au',
    'email_preference': 1,
    'darkmode_preference': 1,
}
# fake user 3s courses
course31 = {
    'course_id': '31',
    'subject_name': 'COMP30022',
}
course32 = {
    'course_id': '32',
    'subject_name': 'COMP30023',
}
#fake user 4s courses
course41 = {
    'course_id': '41',
    'subject_name': 'COMP30019',
}
course42 = {
    'course_id': '42',
    'subject_name': 'COMP30026',
}
# fake course 31 and 41 requests
req311 = {
    'request_ID': 311,
    'proposed_due_date': "11-09-2023 03:50:09",
    'documentation_ID': 876234587967986,
    'content': 'The dog ate my homework. L',
    'application_status': 'Pending',
    'threadID': 4356,
}
req312 = {
    'request_ID': 313,
    'proposed_due_date': "17-12-2023 02:55:19",
    'documentation_ID': 67456745674567,
    'content': 'The cat ate my homework. L',
    'application_status': 'Approved',
    'threadID': 5678, 
}
# fake course 32 and 42 requests
req321 = {
    'request_ID': 321,
    'proposed_due_date': "01-19-2023 03:50:09",
    'documentation_ID': 8794325092384,
    'content': 'Im very sick *sad face*',
    'application_status': 'Pending',
    'threadID': 9009,
}
req322 = {
    'request_ID': 322,
    'proposed_due_date': "01-19-2023 03:50:09",
    'documentation_ID': 8790798709,
    'content': 'Please just give me an extension, im begging',
    'application_status': 'Rejected',
    'threadID': 8109,
}

subjSettings = {
    'globalExtentionLength': 1,
    'generalTutor': 1,
    'extensionTutor': 1,
    'quizTutor': 1,
    'remarkTutor': 1,
    'otherTutor': 1,    
    'generalScoord': 1,
    'extensionScoord': 1,
    'quizScoord': 1,
    'remarkScoord': 1,
    'otherScoord': 1,
    'generalReject': 'Message',
    'extensionApprove': 'Message',
    'extensionReject': 'Message',
    'quizApprove': 'Message',
    'quizReject': 'Message',
    'remarkApprove': 'Message',
    'remarkReject': 'Message',
}